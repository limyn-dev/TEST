/*
 * DebuggerFrame.java
 *
 * Created on 25 August 2005, 09:17
 */

//package XmlRpcDebugger;

import java.awt.*;

/**
 *
 * @author  Meredydd
 */
public class DebuggerFrame extends javax.swing.JFrame {
    
    /** Creates new form DebuggerFrame */
    public DebuggerFrame() {
        initComponents();
        // And then a tweak...
        setSize(407, 357);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        scrollPane = new javax.swing.JScrollPane();
        historyPane = new javax.swing.JEditorPane();
        callField = new javax.swing.JTextField();
        executeButton = new javax.swing.JButton();
        optionsButton = new javax.swing.JButton();

        getContentPane().setLayout(null);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("PTS debugger");
        setResizable(false);
        historyPane.setEditable(false);
        historyPane.setContentType("text/html");
        scrollPane.setViewportView(historyPane);

        getContentPane().add(scrollPane);
        scrollPane.setBounds(0, 0, 400, 250);

        callField.setFont(new java.awt.Font("Courier New", 0, 12));
        callField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                callFieldActionPerformed(evt);
            }
        });

        getContentPane().add(callField);
        callField.setBounds(10, 260, 300, 30);

        executeButton.setText("Execute");
        executeButton.setSelected(true);
        executeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                executeButtonActionPerformed(evt);
            }
        });

        getContentPane().add(executeButton);
        executeButton.setBounds(313, 260, 80, 30);

        optionsButton.setText("Options");
        optionsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                optionsButtonActionPerformed(evt);
            }
        });

        getContentPane().add(optionsButton);
        optionsButton.setBounds(160, 300, 80, 25);

        pack();
    }
    // </editor-fold>//GEN-END:initComponents

    private OptionsFrame options=new OptionsFrame();
    private void optionsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_optionsButtonActionPerformed
        options.setVisible(true);
    }//GEN-LAST:event_optionsButtonActionPerformed

    private void callFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_callFieldActionPerformed
        executeButtonActionPerformed(evt);
    }//GEN-LAST:event_callFieldActionPerformed

    StringBuffer history=new StringBuffer();
    
    private void updateHistory()
    {
        historyPane.setText("<html>\n<body bgcolor=white>\n<font face=\"Courier\">\n"+history+"\n</font>\n</body>\n</html>");
        historyPane.scrollRectToVisible(new Rectangle(historyPane.getHeight()-10, 0, 10, 10));
    }
    
    private void executeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_executeButtonActionPerformed
        String call=callField.getText();
        
        history.append("<font color=#888888>&gt;&gt; </font>");
        history.append(call).append("<br>\n<b>");
        updateHistory();
        Object rv=Main.parseAndExecute(call);
        
        String s=rv.toString();
        s=s.replaceAll("&", "&amp;");
        s=s.replaceAll("<", "&lt;");
        s=s.replaceAll("\n", "<br>\n");
        history.append(rv).append("</b><br>\n");
        updateHistory();

        if(callField.getText().equals(call))
        {
            if(!(rv instanceof Exception))
                callField.setText("");
            else if(rv instanceof ParseException)
                callField.setCaretPosition(((ParseException)rv).getWhere());
        }
        
    }//GEN-LAST:event_executeButtonActionPerformed
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        Main.init();
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DebuggerFrame().setVisible(true);
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField callField;
    private javax.swing.JButton executeButton;
    private javax.swing.JEditorPane historyPane;
    private javax.swing.JButton optionsButton;
    private javax.swing.JScrollPane scrollPane;
    // End of variables declaration//GEN-END:variables
    
}
